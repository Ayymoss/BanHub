// <auto-generated />
using System;
using BanHub.WebCore.Server.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GlobalInfraction.WebCore.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EFAliases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Changed = new DateTimeOffset(new DateTime(2023, 1, 29, 13, 47, 57, 659, DateTimeKind.Unspecified).AddTicks(9836), new TimeSpan(0, 0, 0, 0, 0)),
                            EntityId = -1,
                            IpAddress = "0.0.0.0",
                            UserName = "IW4MAdmin"
                        });
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EFAuthTokens", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFCurrentAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AliasId")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AliasId");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("EFCurrentAliases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AliasId = -1,
                            EntityId = -1
                        });
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("HeartBeat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WebRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EFEntities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Created = new DateTimeOffset(new DateTime(2023, 1, 29, 13, 47, 57, 659, DateTimeKind.Unspecified).AddTicks(9841), new TimeSpan(0, 0, 0, 0, 0)),
                            HeartBeat = new DateTimeOffset(new DateTime(2023, 1, 29, 13, 47, 57, 659, DateTimeKind.Unspecified).AddTicks(9840), new TimeSpan(0, 0, 0, 0, 0)),
                            Identity = "0:UKN",
                            WebRole = 10
                        });
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("HeartBeat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstanceGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("InstanceIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstanceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EFInstances", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("TargetId");

                    b.ToTable("EFNotes", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFPenalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<string>("AntiCheatReason")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Evidence")
                        .HasColumnType("text");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PenaltyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("PenaltyScope")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltyStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltyType")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Submitted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("InstanceId");

                    b.HasIndex("TargetId");

                    b.ToTable("EFPenalties", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFPenaltyIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PenaltyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("PenaltyId")
                        .IsUnique();

                    b.ToTable("EFPenaltyIdentifiers", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServerIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServerPort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("EFServers", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFServerConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Connected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("ServerId");

                    b.ToTable("EFServerConnections", (string)null);
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Statistic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EFStatistics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Count = 0,
                            Statistic = "InstanceCount"
                        },
                        new
                        {
                            Id = -2,
                            Count = 0,
                            Statistic = "PenaltyCount"
                        },
                        new
                        {
                            Id = -3,
                            Count = 0,
                            Statistic = "ServerCount"
                        },
                        new
                        {
                            Id = -4,
                            Count = 1,
                            Statistic = "EntityCount"
                        });
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFAlias", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Entity")
                        .WithMany("Aliases")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFAuthToken", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFCurrentAlias", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFAlias", "Alias")
                        .WithMany()
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Entity")
                        .WithOne("CurrentAlias")
                        .HasForeignKey("BanHub.WebCore.Server.Models.EFCurrentAlias", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alias");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFNote", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Target")
                        .WithMany("Notes")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFPenalty", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanHub.WebCore.Server.Models.EFInstance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Target")
                        .WithMany("Penalties")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Instance");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFPenaltyIdentifier", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Entity")
                        .WithMany("PenaltyIdentifiers")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanHub.WebCore.Server.Models.EFPenalty", "Penalty")
                        .WithOne("Identifier")
                        .HasForeignKey("BanHub.WebCore.Server.Models.EFPenaltyIdentifier", "PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFServer", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFInstance", "Instance")
                        .WithMany("ServerConnections")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFServerConnection", b =>
                {
                    b.HasOne("BanHub.WebCore.Server.Models.EFEntity", "Entity")
                        .WithMany("ServerConnections")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanHub.WebCore.Server.Models.EFServer", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFEntity", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("CurrentAlias")
                        .IsRequired();

                    b.Navigation("Notes");

                    b.Navigation("Penalties");

                    b.Navigation("PenaltyIdentifiers");

                    b.Navigation("ServerConnections");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFInstance", b =>
                {
                    b.Navigation("ServerConnections");
                });

            modelBuilder.Entity("BanHub.WebCore.Server.Models.EFPenalty", b =>
                {
                    b.Navigation("Identifier")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
