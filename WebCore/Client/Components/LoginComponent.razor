@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IApiService ApiLogic
@inject ILocalStorageService LocalStorageService
@inject IDialogService DialogService

<AuthorizeView>
    <Authorized>
        <MudText Align="Align.Center" Typo="Typo.body2">Logged in as @context.User.Identity!.Name</MudText>
        <MudDivider DividerType="DividerType.Middle" Class="my-1 py-1"/>
        <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Logout">Log Out</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Info" OnClick="OpenDialog">Log In</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {

    private async Task Logout()
    {
        var response = await ApiLogic.LogoutAsync();
        if (response == "Success")
        {
            (AuthStateProvider as CustomAuthStateProvider).ClearAuthInfo();
            await LocalStorageService.RemoveItemAsync("IsAuthenticated");
            NavigationManager.NavigateTo("/", true);
        }
    }

    private void OpenDialog()
    {
        var options = new DialogOptions {CloseOnEscapeKey = true, NoHeader = true};
        DialogService.Show<LoginDialog>("Login", options);
    }

}
