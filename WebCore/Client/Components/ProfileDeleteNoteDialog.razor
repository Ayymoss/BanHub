@using Note = BanHub.WebCore.Shared.Models.PlayerProfileView.Note
@inject ISnackbar SnackbarService
@inject NoteService NoteService
@attribute [Authorize(Roles = "WebAdmin, WebSuperAdmin")]

<MudDialog>
    <DialogContent>
        <MudElement Class="d-flex flex-column">
            <MudText Typo="Typo.subtitle1">You're about to delete this note</MudText>
            <MudText Class="mud-text-secondary" Typo="Typo.subtitle2">@Note.Message by @Note.AdminUserName</MudText>
            <MudTextField @bind-Value="_deletionReason" AutoFocus="false" Immediate="true" MaxLength="64" Label="Reason"
                          Variant="Variant.Text" Counter="64" AdornmentIcon="@Icons.Material.Filled.Warning" Adornment="Adornment.End"/>
        </MudElement>
        <MudElement Class="d-flex flex-column mb-3">
            <MudDivider FlexItem="true" DividerType="DividerType.Inset" Class="mx-n6 mb-4 mt-8"/>
            <MudElement Class="d-flex">
                <MudText Class="align-self-center" Typo="Typo.caption" Align="Align.Center" Color="Color.Error">This action is logged</MudText>
                <MudSpacer/>
                <MudButton Class="flex-shrink-1" Variant="Variant.Text" Size="Size.Small" OnClick="ToggleOpen">Cancel</MudButton>
                <MudButton Class="flex-shrink-1 ml-2" Disabled="@_processing" Variant="Variant.Outlined"
                           Size="Size.Small" Color="Color.Error" ButtonType="ButtonType.Submit" OnClick="DeletePenalty">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Deleting...</MudText>
                    }
                    else
                    {
                        <MudText>Delete</MudText>
                    }
                </MudButton>
            </MudElement>
        </MudElement>

    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Note Note { get; set; } = null!;

    private string _deletionReason = string.Empty;
    private bool _processing;

    private void ToggleOpen() => MudDialog.Close();

    private async Task DeletePenalty()
    {
        _processing = true;

        if (_deletionReason.Length < 3)
        {
            SnackbarService.Add("A reason longer than 3 chars required!", Severity.Warning);
            _processing = false;
            return;
        }

        var request = await NoteService.DeleteNoteAsync(new DeleteNoteCommand
        {
            ActionDeletionReason = _deletionReason, 
            NoteGuid = Note.NoteGuid
        });
        if (!request)
        {
            SnackbarService.Add("Failed to delete note!", Severity.Error);
            _processing = false;
            MudDialog.Cancel();
            return;
        }

        SnackbarService.Add("Note deleted!", Severity.Success);
        _processing = false;
        MudDialog.Close(DialogResult.Ok(Note));
    }

}
