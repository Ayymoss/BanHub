@using BanHub.WebCore.Shared.Commands.Web
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ILocalStorageService LocalStorageService

<MudDialog Class="py-6">
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudElement>
                <MudText Align="Align.Center" Typo="Typo.h4">Enter your token</MudText>
                <MudText Align="Align.Center" Typo="Typo.body1">
                    <MudElement Style="color:#878686">Generate a new token in-game with </MudElement><MudElement Style="color:#3496b7">!BHAuth</MudElement>
                </MudText>
                <MudTextField @bind-Value="_token" @onkeypress="OnKeyPress" AutoFocus="false" Immediate="true" MaxLength="6" Label="Token" Variant="Variant.Text" Counter="6" AdornmentIcon="@Icons.Material.Filled.Person" Adornment="Adornment.End" AdornmentColor="Color.Info"/>
            </MudElement>
            <MudElement Class="d-flex">
                <MudButton Disabled="@_processing" Color="Color.Tertiary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" OnClick="UserLogin">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Logging in...</MudText>
                    }
                    else
                    {
                        <MudText>Log In</MudText>
                    }
                </MudButton>
                @if (!string.IsNullOrEmpty(_error))
                {
                    <MudText Class="align-self-center ml-2" Align="Align.Left" Color="Color.Warning" Typo="Typo.body1">Error: @_error</MudText>
                }
            </MudElement>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private string? _token;
    private bool _processing;
    private string? _error;

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await UserLogin();
        }
    }

    private async Task UserLogin()
    {
        _processing = true;
        _error = null;
        if (string.IsNullOrEmpty(_token))
        {
            _processing = false;
            _error = "Token is required";
            return;
        }

        if (_token.Length is not 6)
        {
            _error = "Invalid token length";
            _processing = false;
            return;
        }

        var tokenModel = new WebTokenLoginCommand {Token = _token};
        var success = await AuthService.LoginAsync(tokenModel);
        if (success)
        {
            await LocalStorageService.SetItemAsStringAsync("IsAuthenticated", "true");
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            return;
        }

        _error = "Invalid or expired token";
        _processing = false;
    }

}
