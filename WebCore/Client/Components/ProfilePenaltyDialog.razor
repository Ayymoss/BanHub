@using Penalty = BanHub.WebCore.Shared.Models.PlayerProfileView.Penalty
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudPaper Elevation="2" Class="pa-4 mb-2">
            <MudGrid Spacing="2" Class="d-flex flex-row">
                <MudItem Class="d-flex flex-1 align-center flex-column">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="Color.Info">Reason</MudText>
                    <MudText Align="Align.Center" Typo="Typo.body2" Class="mud-text-secondary">@Penalty.Reason</MudText>
                </MudItem>
                <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle"/>
                <MudItem Class="d-flex flex-1 align-center flex-column">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2" Color="Color.Info">Penalty ID</MudText>
                    <MudSpacer/>
                    <MudText Align="Align.Center" Typo="Typo.body2" Class="mud-text-secondary">@Penalty.PenaltyGuid</MudText>
                    <MudSpacer/>
                    <MudElement>
                        @switch (Penalty.PenaltyScope)
                        {
                            case PenaltyScope.Local:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Local</MudChip>
                                break;
                            case PenaltyScope.Global:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Global</MudChip>
                                break;
                        }
                        @switch (Penalty.PenaltyType)
                        {
                            case PenaltyType.Warning:
                                <MudChip Variant="Variant.Text" Size="Size.Small">Warn</MudChip>
                                break;
                            case PenaltyType.Mute:
                                <MudChip Variant="Variant.Text" Size="Size.Small">Mute</MudChip>
                                break;
                            case PenaltyType.Kick:
                                <MudChip Variant="Variant.Text" Size="Size.Small">Kick</MudChip>
                                break;
                            case PenaltyType.Unban:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Unban</MudChip>
                                break;
                            case PenaltyType.TempBan:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning">Tempban</MudChip>
                                break;
                            case PenaltyType.Ban:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Ban</MudChip>
                                break;
                        }
                        @switch (Penalty.PenaltyStatus)
                        {
                            case PenaltyStatus.Informational:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Informational</MudChip>
                                break;
                            case PenaltyStatus.Active:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Success">Active</MudChip>
                                break;
                            case PenaltyStatus.Revoked:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Revoked</MudChip>
                                break;
                            case PenaltyStatus.Expired:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Expired</MudChip>
                                break;
                        }
                    </MudElement>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem Class="flex-1">
                <MudPaper Class="d-flex justify-center flex-column align-center align-self-center pa-4" Elevation="2">
                    <MudLink Href="@($"/Players/{Penalty.AdminIdentity}")" Typo="Typo.subtitle2" Color="Color.Info">@Penalty.AdminUserName</MudLink>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Issuer</MudText>
                </MudPaper>
            </MudItem>
            @if (Penalty.Expiration.HasValue)
            {
                <MudItem Class="flex-1">
                    <MudPaper Class="d-flex justify-center flex-column align-center align-self-center pa-4" Elevation="2">
                        <MudText Typo="Typo.subtitle2" Color="Color.Info">@Penalty.Expiration.Value.Humanize()</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Expiration</MudText>
                    </MudPaper>
                </MudItem>
            }
            <MudItem Class="flex-1">
                <MudPaper Class="d-flex justify-center flex-column align-center align-self-center pa-4" Elevation="2">
                    <MudLink Href="@($"/Communities/{Penalty.CommunityGuid}")" Typo="Typo.subtitle2" Color="Color.Info">@Penalty.CommunityName</MudLink>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Community</MudText>
                </MudPaper>
            </MudItem>
            <MudItem Class="flex-1">
                <MudPaper Class="d-flex justify-center flex-column align-center align-self-center pa-4" Elevation="2">
                    <MudText Typo="Typo.subtitle2" Color="Color.Info">
                        <MudTooltip Arrow="true" Placement="Placement.Top" Text="@Penalty.Submitted.ToString("yyyy-MM-dd HH:mm:ss")">
                            @(Penalty.Submitted.Humanize().Titleize())
                        </MudTooltip>
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">Submitted</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudPaper Elevation="2" Class="pa-4 mt-2 mb-4 d-flex justify-center">
            @if (Penalty.Evidence is not null)
            {
                <iframe src="https://www.youtube.com/embed/@Penalty.Evidence" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="height:500px"></iframe>
            }
            else
            {
                <MudStack Justify="Justify.Center">
                    <MudText Align="Align.Center" Class="mud-text-disabled" Typo="Typo.h4">Evidence not submitted!</MudText>
                    <AuthorizeView Roles="InstanceModerator, InstanceAdministrator, InstanceSeniorAdmin, InstanceOwner, WebAdmin, WebSuperAdmin">
                        <Authorized>
                            <MudButton Variant="Variant.Filled" Size="Size.Large" FullWidth="true" Color="Color.Primary" OnClick="OpenSubmitDialog">Submit Evidence</MudButton>
                        </Authorized>
                    </AuthorizeView>
                </MudStack>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <AuthorizeView Roles="WebAdmin, WebSuperAdmin">
            <Authorized>
                <MudButton Class="mb-4 mr-4" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Error" OnClick="OpenDeleteConfirmDialog">Delete Penalty</MudButton>
            </Authorized>
        </AuthorizeView>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Penalty Penalty { get; set; } = null!;

    private async Task OpenDeleteConfirmDialog()
    {
        var parameters = new DialogParameters
        {
            {"Penalty", Penalty}
        };

        var options = new DialogOptions {CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true};
        var dialog = await DialogService.ShowAsync<ProfilePenaltyDeleteConfirmDialog>("Delete Penalty?", parameters, options);
        var result = await dialog.Result;

        if (result?.Data is not null)
        {
            MudDialog.Close(DialogResult.Ok(result.Data));
        }
    }

    private async Task OpenSubmitDialog()
    {
        var parameters = new DialogParameters
        {
            {"Penalty", Penalty}
        };

        var options = new DialogOptions {CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = true};
        var dialog = await DialogService.ShowAsync<ProfilePenaltySubmitEvidenceDialog>("Submit Evidence?", parameters, options);
        var result = await dialog.Result;

        if (result?.Data is not null)
        {
            MudDialog.Close(DialogResult.Ok(result.Data));
        }
    }

}
