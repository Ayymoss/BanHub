<MudDialog>
    <DialogContent>

        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MudList Dense="true">
                    <MudListItem IconColor="Color.Warning" Icon="@Icons.Material.Filled.Report">
                        <b>Penalty: </b> @Penalty.PenaltyGuid
                        @switch (Penalty.PenaltyScope)
                        {
                            case PenaltyScope.Local:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Local</MudChip>
                                break;
                            case PenaltyScope.Global:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Global</MudChip>
                                break;
                        }
                        @switch (Penalty.PenaltyType)
                        {
                            case PenaltyType.Warn:
                                <MudChip Variant="Variant.Text" Size="Size.Small">Warn</MudChip>
                                break;
                            case PenaltyType.Mute:
                                <MudChip Variant="Variant.Text" Size="Size.Small">Mute</MudChip>
                                break;
                            case PenaltyType.Kick:
                                <MudChip Variant="Variant.Text" Size="Size.Small">Kick</MudChip>
                                break;
                            case PenaltyType.Unban:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Unban</MudChip>
                                break;
                            case PenaltyType.TempBan:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning">Tempban</MudChip>
                                break;
                            case PenaltyType.Ban:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Ban</MudChip>
                                break;
                        }
                        @switch (Penalty.PenaltyStatus)
                        {
                            case PenaltyStatus.Informational:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Informational</MudChip>
                                break;
                            case PenaltyStatus.Active:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Success">Active</MudChip>
                                break;
                            case PenaltyStatus.Revoked:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Revoked</MudChip>
                                break;
                            case PenaltyStatus.Expired:
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Expired</MudChip>
                                break;
                        }
                    </MudListItem>
                    <MudDivider DividerType="DividerType.Inset"/>
                    <MudListItem Icon="@Icons.Material.Filled.AdminPanelSettings">
                        <b>Accusing Admin: </b> @Penalty.Admin.Alias.UserName
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.Message">
                        <b>Provided Reason: </b> @Penalty.Reason
                    </MudListItem>
                    @if (Penalty.Duration.HasValue)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.Timelapse">
                            <b>Penalty Duration: </b> @Penalty.Duration.Value.Humanize()
                        </MudListItem>
                    }
                    <MudListItem Icon="@Icons.Material.Filled.Storage">
                        <b>Sending Server: </b> @(Penalty.Instance.InstanceName ?? Penalty.Instance.InstanceGuid.ToString())
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.MoreTime">
                        <b>Time Submitted: </b>
                        <MudTooltip Arrow="true" Placement="Placement.Top" Text="@Penalty.Submitted.Value.ToString("yyyy-MM-dd HH:mm:ss")">
                            @(Penalty.Submitted.Value.Humanize())
                        </MudTooltip>
                    </MudListItem>
                </MudList>
            </MudPaper>
            @if (Penalty.Evidence is not null)
            {
                <MudPaper Elevation="2" Class="pa-4 mt-2 d-flex justify-center">
                    <iframe src="https://www.youtube.com/embed/@_videoId" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="height:315px"></iframe>
                </MudPaper>
            }
            else
            {
                <MudPaper Elevation="2" Class="pa-4 mt-2 d-flex justify-center">
                    <MudText Align="Align.Center" Class="mud-text-disabled" Typo="Typo.h4">Evidence not submitted!</MudText>
                </MudPaper>
            }
        </MudItem>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public PenaltyDto Penalty { get; set; } = null!;

    private string? _videoId;

    void Cancel() => MudDialog.Cancel();

    protected override Task OnInitializedAsync()
    {
        if (Penalty.Evidence is null) return base.OnInitializedAsync();

        var uri = new Uri(Penalty.Evidence);
        var query = HttpUtility.ParseQueryString(uri.Query);
        _videoId = query["v"];

        return base.OnInitializedAsync();
    }

}
