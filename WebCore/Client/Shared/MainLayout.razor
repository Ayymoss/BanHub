@using GlobalInfraction.WebCore.Client.Theme
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inherits LayoutComponentBase


<MudThemeProvider IsDarkMode="true" Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudChip Variant="Variant.Text" Icon="@Icons.Material.Filled.Person" Color="Color.Info">Online: @_online</MudChip>
        <MudChip Variant="Variant.Text" Icon="@Icons.Material.Filled.Block" Color="Color.Error">Day Global Bans: @_bans</MudChip>
        <MudSpacer/>
        <MudItem xs="32">
            <MudTextField @bind-Value="_searchValue" @onkeypress="OnKeyPress" AutoFocus="false" Immediate="true" Placeholder="Search" Variant="Variant.Outlined" Adornment="Adornment.End" Margin="Margin.Dense" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Info"/>
        </MudItem>
        <MudDivider FlexItem="true" Vertical="true" DividerType="DividerType.Middle" Class="mx-4 my-4" Style="padding-left: 12px;"/>
        <MudIconButton Icon="@Icons.Custom.Brands.Discord" Color="Color.Primary" Link="https://discord.gg/Arruj6DWvp" Target="_blank"/>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/Ayymoss/GlobalInfractions" Target="_blank"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudImage Height="40" Src="/images/logo.png" Alt="GI" Elevation="25" Class="rounded-lg" Style="padding-right: 8px;padding-bottom: 4px;"/>
            <MudText Typo="Typo.h6" Style="padding-top: 4px;">Global Infractions</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-8 pt-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private string? _searchValue { get; set; }

    private readonly MudTheme _theme = Theme.LandingPageTheme();

    private int _online;
    private int _bans;

    private bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (_searchValue is null || _searchValue?.Length < 3)
            {
                Snackbar.Add("Search must be at least 3 characters long.", Severity.Info);
                return;
            }

            NavigationManager.NavigateTo($"/Search?q={_searchValue}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var online = await Http.GetAsync("/api/v2/Entity/Online");
        var bans = await Http.GetAsync("/api/v2/Infraction/Count");

        var onlineResult = await online.Content.ReadAsStringAsync();
        var bansResult = await bans.Content.ReadAsStringAsync();

        _ = int.TryParse(onlineResult, out var onlineParsed);
        _ = int.TryParse(bansResult, out var banParsed);

        _online = onlineParsed;
        _bans = banParsed;

        await base.OnInitializedAsync();
    }

}
