@using BanHub.WebCore.Shared.Utilities
@using System.Security.Claims
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<MudPaper Class="d-flex flex-column" Width="240px" Height="100%" Elevation="0">
    <MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Info" Class="pa-2">
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="Penalties" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Report">Penalties</MudNavLink>
        <MudNavLink Href="Players" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Players</MudNavLink>
        <MudNavLink Href="Communities" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Storage">Communities</MudNavLink>
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="@($"Players/{_identity}")" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person">My Profile</MudNavLink>
            </Authorized>
        </AuthorizeView>
    </MudNavMenu>
    <MudSpacer/>
    <MudStack Spacing="2" Class="pa-2">
        <LoginComponent/>
        <MudTextField @bind-Value="_searchValue" Disabled="true" @onkeypress="OnKeyPress" AutoFocus="false" Immediate="true" Placeholder="Search"
                          Variant="Variant.Outlined" Adornment="Adornment.End" Margin="Margin.Dense" AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Info"/>
        <MudDivider Class="mb-1" FlexItem="true" Light="true" DividerType="DividerType.FullWidth"/>
        <MudElement Class="d-inline-flex align-center mb-n1">
            <MudElement>
                <MudText Typo="Typo.caption" Class="mud-text-disabled">BanHub by Amos</MudText>
            </MudElement>
            <MudSpacer/>
            <MudElement>
                <MudText Typo="Typo.caption" Class="mud-text-disabled">@_versionNumber</MudText>
            </MudElement>
        </MudElement>
    </MudStack>
</MudPaper>

@code {
    private string? _identity;
    private string? _searchValue;
    private string _versionNumber = Utilities.GetVersionAsString();

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (_searchValue is null || _searchValue?.Length < 3)
            {
                Snackbar.Add("Search must be at least 3 characters long.", Severity.Info);
                return;
            }

            NavigationManager.NavigateTo($"/Search?q={_searchValue}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await (AuthStateProvider as CustomAuthStateProvider)!.GetAuthenticationStateAsync()).User;
        _identity ??= user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    }

}
