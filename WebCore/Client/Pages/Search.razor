@page "/Search"
@inject SearchService SearchService

<PageTitle>Search | Ban Hub</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true" Class="ml-6 mud-text-secondary">Search</MudText>

<MudText Typo="Typo.body2" GutterBottom="true">Search is a bit scuffed right now. You need to navigate to a different page then search again.</MudText>

@if (_searchResults is null || _empty)
{
    @if (_empty)
    {
        <MudText Typo="Typo.body1" GutterBottom="true">No results</MudText>
    }
    else
    {
        <MudText Typo="Typo.body1" GutterBottom="true">Loading...</MudText>
    }
}
else
{
    <MudTable Elevation="3" Items="@_searchResults" FixedHeader="true" Height="400px">
        <HeaderContent>
            <MudTh>Identity</MudTh>
            <MudTh>Username</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Identity</MudTd>
            <MudTd DataLabel="User">
                <MudLink Href="@($"/Communities/{context.Identity}")" Typo="Typo.body2" Color="Color.Info">@context.Username</MudLink>
            </MudTd>
        </RowTemplate>
    </MudTable>
}


@code {

    [Parameter, SupplyParameterFromQuery(Name = "q")]
    public string? Query { get; set; }

    private List<WebCore.Shared.Models.SearchView.Search>? _searchResults;
    private bool _empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Query))
        {
            _empty = true;
            return;
        }
        _searchResults = (await SearchService.GetPlayersAsync(Query)).ToList();
        if (_searchResults is null || !_searchResults.Any()) _empty = true;
    }

}
