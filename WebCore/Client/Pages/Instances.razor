@page "/Instances"
@inject HttpClient Http

<PageTitle>Instances | Ban Hub</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true" Class="ml-6 mud-text-secondary">Verified Instances</MudText>

<MudTable ServerData="@(new Func<TableState, Task<TableData<InstanceDto>>>(ServerReload))" Elevation="2" RowsPerPage="20" Dense="true" Hover="true" @ref="_table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All instances</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="Id" T="InstanceDto">ID</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Instance Name" T="InstanceDto">Instance Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Instance IP" T="InstanceDto">Instance IP</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Servers" T="InstanceDto">Servers</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="HeartBeat" T="InstanceDto">Heart Beat</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Created" T="InstanceDto">Created</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.InstanceGuid</MudTd>
        <MudTd DataLabel="Instance Name">@(context.InstanceName ?? "<Name Not Set>")</MudTd>
        <MudTd DataLabel="Instance IP">@context.InstanceIp</MudTd>
        <MudTd DataLabel="Servers">@context.ServerCount</MudTd>
        <MudTd DataLabel="HeartBeat">@context.HeartBeat!.Value.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
        <MudTd DataLabel="Created">@context.Created</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Class="mb-8" Color="Color.Warning">No instances found.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Indeterminate="true"/>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] {50, 100}"/>
    </PagerContent>
</MudTable>


@code
{
    [Parameter, SupplyParameterFromQuery(Name = "search")]
    public string? SearchString { get; set; }

    private MudTable<InstanceDto>? _table;
    private IEnumerable<InstanceDto>? _pagedData;
    private string? _searchString;
    private int _totalItems;

    private async Task<TableData<InstanceDto>> ServerReload(TableState state)
    {
        var paginationQuery = new PaginationDto
        {
            Page = state.Page,
            PageSize = state.PageSize,
            SortLabel = state.SortLabel,
            SortDirection = (int)state.SortDirection,
            SearchString = _searchString
        };

        var statistics = await Http.GetFromJsonAsync<StatisticDto>("/api/v2/Statistic");
        var data = await Http.PostAsJsonAsync("/api/v2/Instance/All", paginationQuery);
        var result = await data.Content.ReadFromJsonAsync<List<InstanceDto>>();

        _pagedData = result!.ToArray();
        _totalItems = statistics!.PenaltyCount!.Value;

        return new TableData<InstanceDto> {TotalItems = _totalItems, Items = _pagedData};
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table!.ReloadServerData();
    }
}
