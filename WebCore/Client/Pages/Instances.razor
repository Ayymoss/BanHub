@page "/Instances"
@using GlobalInfraction.WebCore.Shared.Models
@inject HttpClient Http

<PageTitle>Instances</PageTitle>

@if (_instances is null)
{
    <p>
        @if (Empty)
        {
            <span class="text-muted">No instances(s) found.</span>
        }
        else
        {
            <span class="text-start">Loading...</span>
        }
    </p>
}
else
{
    <Table @ref="table" TItem="InstanceDto" DataSource="@_instances" Total="_total" @bind-PageSize="_pageSize">
        <PropertyColumn Property="c => c.InstanceGuid" Title="ID" Sortable/>
        <PropertyColumn Property="c => c.InstanceName" Title="Instance Name" Sortable SorterCompare="@((x, y) => x.CompareTo(y))">
            <Text Strong>@(context.InstanceName ?? "Instance Name Not Set")</Text>
        </PropertyColumn>
        <PropertyColumn Property="c => c.InstanceIp" Title="Instance IP" Sortable/>
        <PropertyColumn Property="c => c.HeartBeat" Title="Heartbeat" Format="yyyy-MM-dd hh:mm:ss" Sortable/>
    </Table>
}

@code {

    [Parameter, SupplyParameterFromQuery(Name = "guid")]
    public string? InstanceGuid { get; set; }

    private bool Empty { get; set; }
    private List<InstanceDto>? _instances;

    ITable table;
    int _pageSize = 20;
    int _total;
    
    protected override async Task OnInitializedAsync()
    {
        if (InstanceGuid is null)
        {
            _instances = await Http.GetFromJsonAsync<List<InstanceDto>>("/api/Instance/All");
            if (_instances is null || !_instances.Any()) Empty = true;
        }
        else
        {
            var response = await Http.GetAsync($"/api/Instance?guid={InstanceGuid}");
            if (response.IsSuccessStatusCode)
            {
                var instances = await response.Content.ReadFromJsonAsync<InstanceDto>();
                if (instances is not null)
                {
                    _instances = new List<InstanceDto> {instances};
                }
            }
            else
            {
                Empty = true;
            }
        }
    }


}
