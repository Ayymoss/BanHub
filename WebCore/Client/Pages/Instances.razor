@page "/Instances"
@using GlobalInfraction.WebCore.Shared.Models
@using Color = MudBlazor.Color
@using SortDirection = MudBlazor.SortDirection
@inject HttpClient Http

<PageTitle>Instances</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Verified Instances</MudText>

@if (_instances is null)
{
    <p>
        @if (Empty)
        {
            <MudText Class="mb-8" Color="Color.Warning">No instances(s) found.</MudText>
        }
        else
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
    </p>
}
else
{
    <MudTable Items="_instances" Dense="true" Hover="true" SortLabel="Sort By" Elevation="0" RowsPerPage="20" Filter="new Func<InstanceDto, bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">All active instances</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InstanceDto, object>(x => x.InstanceGuid)">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InstanceDto, object>(x => x.InstanceName)">Instance Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InstanceDto, object>(x => x.InstanceIp)">Instance IP</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<InstanceDto, object>(x => x.HeartBeat)">Heartbeat</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.InstanceGuid</MudTd>
            <MudTd DataLabel="Instance Name">@context.InstanceName</MudTd>
            <MudTd DataLabel="Instance IP">@context.InstanceIp</MudTd>
            <MudTd DataLabel="Heartbeat">
                @if (context.HeartBeat + TimeSpan.FromMinutes(5) > DateTimeOffset.UtcNow)
                {
                    <MudText Typo="Typo.body2" Color="Color.Info">@context.HeartBeat</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Warning">@context.HeartBeat</MudText>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {50, 100}"/>
        </PagerContent>
    </MudTable>
}

@code {

    [Parameter, SupplyParameterFromQuery(Name = "search")]
    public string? SearchString { get; set; }

    private bool Empty { get; set; }
    private List<InstanceDto>? _instances;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _instances = await Http.GetFromJsonAsync<List<InstanceDto>>("/api/Instance/All");
        if (_instances is null || !_instances.Any()) Empty = true;
        if (SearchString is not null) _search = SearchString;
    }

    private bool FilterFunc1(InstanceDto element) => FilterFunc(element, _search);

    private bool FilterFunc(InstanceDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.InstanceGuid.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.InstanceName!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.InstanceIp!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


}
