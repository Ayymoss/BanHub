@page "/Communities/{Identity}"
@using System.Security.Claims
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@_title | Community | Ban Hub</PageTitle>
@if (_loading)
{
    <MudText Typo="Typo.h4">Loading...</MudText>
    <MudProgressLinear Color="Color.Info" Size="Size.Large" Indeterminate="true" Class="my-7"/>
}
else
{
    @if (_instance is null)
    {
        <MudText Typo="Typo.h4">Community not found!</MudText>
        <MudText Typo="Typo.body1" Color="Color.Info">Provided community GUID doesn't exist.</MudText>
    }
    else
    {
        <MudElement Class="d-flex align-center">
            <MudElement Class="d-flex align-center">
                <MudText Typo="Typo.h4" Class="mud-text-secondary d-flex align-center">
                    @_instance.InstanceName
                    <MudText Typo="Typo.h4" Color="Color.Info" Class="mx-1 mt-1">&bull;</MudText>
                    @_instance.InstanceIp
                </MudText>
            </MudElement>
            <MudSpacer/>
            <MudElement>
                @if (_instance.HeartBeat + TimeSpan.FromMinutes(5) > DateTimeOffset.UtcNow)
                {
                    <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Info">Connected</MudChip>
                }
                else
                {
                    <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Warning">Disconnected</MudChip>
                }
                @if (_instance.Active is true)
                {
                    <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Info">Active</MudChip>
                }
                else
                {
                    <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Error">Not Active</MudChip>
                }
            </MudElement>
        </MudElement>
        <MudElement Class="mt-4 d-flex flex-column">
            <MudStack Row="true" Spacing="2">
                <MudPaper Class="pa-4 d-flex flex-grow-1 flex-column">
                    <MudText Typo="Typo.h6" Class="mb-4">About</MudText>
                    <MudText>@_instance.About</MudText>
                </MudPaper>
                @if (_instance.Socials is not null and not {Count: 0})
                {
                    <MudPaper MaxWidth="20%" MinWidth="20%" Class="pa-4 d-flex flex-grow-1 flex-column">
                        <MudText Typo="Typo.h6" Class="mb-4">Socials</MudText>
                        @foreach (var social in _instance.Socials)
                        {
                            <MudLink Color="Color.Info" Href="@(social.Value)">@social.Key</MudLink>
                        }
                    </MudPaper>
                }
            </MudStack>
            <MudElement Class="mt-4">
                <MudGrid Spacing="2" Justify="Justify.FlexStart">
                    <MudItem xs="12" sm="4" xl="3" xxl="2">
                        <MudPaper Class="d-flex flex-column pa-4" Elevation="2">
                            <MudText Typo="Typo.subtitle1" Color="Color.Info">@_instance.ServerCount</MudText>
                            <MudText Class="mud-text-secondary">Servers</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="4" xl="3" xxl="2">
                        <MudPaper Class="d-flex flex-column pa-4" Elevation="2">
                            <MudText Typo="Typo.subtitle1" Color="Color.Info">@_instance.Created.Humanize()</MudText>
                            <MudText Class="mud-text-secondary">Created</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudElement>

            <MudElement Class="mt-4">
                <MudTabs Position="Position.Left" Elevation="2" Rounded="true" PanelClass="d-flex flex-column ml-4" SliderColor="Color.Info">
                    <MudTabPanel Text="Servers">
                        <MudElement Class="flex-grow-1 d-flex flex-column">
                            @if (_instance.ServerCount is null or 0)
                            {
                                <MudPaper Class="pa-4 flex-1 d-flex align-center justify-center">
                                    <MudText Align="Align.Center" Class="mud-text-secondary" Typo="Typo.h6">The community has no servers.</MudText>
                                </MudPaper>
                            }
                            else
                            {
                                <MudTable Striped="true" HeaderClass="mud-theme-info-darken" Outlined="false" Bordered="false"
                                          Items="@_instance.Servers" Dense="true" @ref="_serverTable" T="ServerDto" RowsPerPage="10">
                                    <HeaderContent>
                                        <MudTh Class="rounded-tl py-2">
                                            <MudTableSortLabel SortBy="new Func<ServerDto, object>(x => x.ServerName)">Name</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>
                                            <MudTableSortLabel SortBy="new Func<ServerDto, object>(x => x.ServerId)">IP</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh Class="rounded-tr">
                                            <MudTableSortLabel SortBy="new Func<ServerDto, object>(x => x.ServerGame)">Game</MudTableSortLabel>
                                        </MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Name">@context.ServerName</MudTd>
                                        <MudTd DataLabel="IP">
                                            @if (context.ServerIp.IsInternal())
                                            {
                                                <MudText Typo="Typo.body2">@_instance.InstanceIp:@context.ServerPort</MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body2">@context.ServerId</MudText>
                                            }
                                        </MudTd>
                                        <MudTd DataLabel="Game">@(context.ServerGame?.GetGameName() ?? "Unknown")</MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager/>
                                    </PagerContent>
                                </MudTable>
                            }
                        </MudElement>
                    </MudTabPanel>
                </MudTabs>
            </MudElement>
        </MudElement>
    }
}

@code
{
    [Parameter]
    public string? Identity { get; set; }

    private InstanceDto? _instance;
    private string _title = "Not Found";
    private bool _loading = true;
    private bool _authorisedView;
    private MudTable<ServerDto>? _serverTable;

    protected override async Task OnInitializedAsync()
    {
        var user = (await (AuthStateProvider as CustomAuthStateProvider)!.GetAuthenticationStateAsync()).User;
        Identity ??= user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        _authorisedView = user.IsInAnyRole("WebAdmin", "WebSuperAdmin");

        var request = await Http.GetAsync(Http.ParseUri("api/Instance", new {Guid = Identity}));
        if (!request.IsSuccessStatusCode)
        {
            _loading = false;
            return;
        }

        _instance = await request.Content.ReadFromJsonAsync<InstanceDto>();
        if (_instance is not null)
        {
            _instance.ServerCount = _instance.Servers?.Count ?? 0;
            _title = _instance.InstanceName ?? _instance.InstanceGuid.ToString();
        }

        _loading = false;
    }
}
