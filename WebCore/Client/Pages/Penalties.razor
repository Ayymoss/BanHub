@page "/Penalties"
@using Penalty = BanHub.WebCore.Shared.Models.PenaltiesView.Penalty
@inject StatisticService StatisticService
@inject PenaltyService PenaltyService

<PageTitle>Penalties | Ban Hub</PageTitle>

<MudPaper Elevation="2" Class="d-flex flex-row justify-space-between align-center pa-4 rounded-b-0">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mud-text-secondary">Penalties</MudText>
    <MudElement Class="ml-2 mt-0">
        <MudTextField T="string" ValueChanged="OnSearch" AutoFocus="false" Placeholder="Filter"
                      Variant="Variant.Outlined" Adornment="Adornment.End" Margin="Margin.Dense" AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Default"/>
    </MudElement>
</MudPaper>
<MudTable Striped="true" HeaderClass="mud-theme-info-darken" Outlined="false" Bordered="false"
          ServerData="@(new Func<TableState, Task<TableData<Penalty>>>(ServerReload))" Elevation="2" RowsPerPage="20" Dense="true"
          @ref="_table">
    <HeaderContent>
        <MudTh Class="py-2">
            <MudTableSortLabel SortLabel="Id" T="Penalty">ID</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="RecipientName" T="Penalty">Offender</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="IssuerName" T="Penalty">Issuer</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Reason" T="Penalty">Reason</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Type" T="Penalty">Type</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Status" T="Penalty">Status</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Scope" T="Penalty">Scope</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Community" T="Penalty">Community</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="Submitted" T="Penalty">Submitted</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.PenaltyGuid</MudTd>
        <MudTd DataLabel="IssuerName">
            <MudLink Href="@($"/Players/{context.TargetIdentity}")" Typo="Typo.body2" Color="Color.Info">@context.TargetUserName</MudLink>
        </MudTd>
        <MudTd DataLabel="RecipientName">
            <MudLink Href="@($"/Players/{context.AdminIdentity}")" Typo="Typo.body2" Color="Color.Info">@context.AdminUserName</MudLink>
        </MudTd>
        <MudTd DataLabel="Reason">@context.Reason</MudTd>
        <MudTd DataLabel="Type">
            @switch (context.PenaltyType)
            {
                case PenaltyType.Warning:
                    <MudChip Variant="Variant.Text" Size="Size.Small">Warn</MudChip>
                    break;
                case PenaltyType.Mute:
                    <MudChip Variant="Variant.Text" Size="Size.Small">Mute</MudChip>
                    break;
                case PenaltyType.Kick:
                    <MudChip Variant="Variant.Text" Size="Size.Small">Kick</MudChip>
                    break;
                case PenaltyType.Unban:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Unban</MudChip>
                    break;
                case PenaltyType.TempBan:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning">Tempban</MudChip>
                    break;
                case PenaltyType.Ban:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Ban</MudChip>
                    break;
            }
        </MudTd>
        <MudTd DataLabel="Status">
            @switch (context.PenaltyStatus)
            {
                case PenaltyStatus.Informational:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Informational</MudChip>
                    break;
                case PenaltyStatus.Active:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Success">Active</MudChip>
                    break;
                case PenaltyStatus.Revoked:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Revoked</MudChip>
                    break;
                case PenaltyStatus.Expired:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Expired</MudChip>
                    break;
            }
        </MudTd>
        <MudTd DataLabel="Scope">
            @switch (context.PenaltyScope)
            {
                case PenaltyScope.Local:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Local</MudChip>
                    break;
                case PenaltyScope.Global:
                    <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Global</MudChip>
                    break;
            }
        </MudTd>
        <MudTd DataLabel="Community">
            <MudLink Href="@($"/Communities/{context.CommunityGuid}")" Typo="Typo.body2" Color="Color.Info">@context.CommunityName</MudLink>
        </MudTd>
        <MudTd DataLabel="Submitted">@context.Submitted.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Class="mb-8" Color="Color.Warning">No penalties found.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] {20, 50, 100}"/>
    </PagerContent>
</MudTable>


@code
{
    private MudTable<Penalty>? _table;
    private IEnumerable<Penalty>? _pagedData;
    private string? _searchString;

    private async Task<TableData<Penalty>> ServerReload(TableState state)
    {
        var paginationQuery = new GetPenaltiesPaginationCommand
        {
            Page = state.Page,
            PageSize = state.PageSize,
            SortLabel = state.SortLabel,
            SortDirection = (int)state.SortDirection,
            SearchString = _searchString
        };

        var context = await PenaltyService.GetPenaltiesPaginationAsync(paginationQuery);
        _pagedData = context.Penalties;
        return new TableData<Penalty> {TotalItems = context.Count, Items = _pagedData};
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table!.ReloadServerData();
    }
}
