@page "/Users"
@using GlobalInfraction.WebCore.Shared.Models
@inject HttpClient Http

<PageTitle>Users</PageTitle>

@if (_entities is null)
{
    <p>
        @if (Empty)
        {
            <span class="text-muted">No user(s) found.</span>
        }
        else
        {
            <span class="text-start">Loading...</span>
        }
    </p>
}
else
{
    <Table @ref="table" TItem="EntityDto" DataSource="@_entities" Total="_total" @bind-PageSize="_pageSize">
        <PropertyColumn Property="c => c.Identity" Sortable/>
        <PropertyColumn Property="c => c.Alias" Title="Name" Sortable SorterCompare="@((x, y) => x.UserName.CompareTo(y.UserName))">
            <Text Strong>@context.Alias!.UserName</Text>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Reputation" Sortable/>
        <PropertyColumn Property="c => c.Infractions" Sortable SorterCompare="@((x, y) => x.Count.CompareTo(y.Count))">
            @(context.Infractions?.Count != 0 ? context.Infractions!.Count.ToString() : "User has no infractions")
        </PropertyColumn>
        <PropertyColumn Property="c => c.HeartBeat" Title="Online?">
            @if (context.HeartBeat + TimeSpan.FromMinutes(5) > DateTimeOffset.UtcNow)
            {
                <Tag Color="geekblue">Online</Tag>
            }
            else
            {
                <Tag Color="volcano">Offline</Tag>
            }
        </PropertyColumn>
        <PropertyColumn Property="c => c.Created" Format="yyyy-MM-dd hh:mm:ss" Sortable/>
    </Table>
}


@code
{
    [Parameter, SupplyParameterFromQuery(Name = "identity")]
    public string? EntityIdentity { get; set; }

    private bool Empty { get; set; }
    private List<EntityDto>? _entities;

    ITable table;
    int _pageSize = 20;
    int _total;

    protected override async Task OnInitializedAsync()
    {
        if (EntityIdentity is null)
        {
            _entities = await Http.GetFromJsonAsync<List<EntityDto>>("/api/Entity/All");
            if (_entities is null || !_entities.Any()) Empty = true;
        }
        else
        {
            var response = await Http.GetAsync($"/api/Entity?identity={EntityIdentity}");
            if (response.IsSuccessStatusCode)
            {
                var entities = await response.Content.ReadFromJsonAsync<EntityDto>();
                if (entities is not null)
                {
                    _entities = new List<EntityDto> {entities};
                }
            }
            else
            {
                Empty = true;
            }
        }
    }
}
