@page "/Profile/{Identity}"
@using Humanizer
@inject HttpClient Http

<OpenGraphComponent Title="Profile" Description="Welcome to Ban Hub"/>

<MudText Typo="Typo.h3" GutterBottom="true">Profile</MudText>

@if (_entity is null)
{
    <MudText Typo="Typo.body1" GutterBottom="true" Color="Color.Info">Identity doesn't exist.</MudText>
}
else
{
    <MudContainer Style="height: 600px" Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
            @if (!_entity.Penalties.Any())
            {
                <MudText Align="Align.Center" Typo="Typo.h5">The user has no penalties.</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Align="Align.Center">Click an penalty for info</MudText>
                <br/>
                <MudTable Items="@_entity.Penalties" Hover="true" FixedHeader="true" Height="100%" @ref="mudTable" OnRowClick="RowClickEvent" T="PenaltyDto">
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.Admin.Alias.UserName)">Admin</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.Reason)">Reason</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.PenaltyType)">Type</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.PenaltyScope)">Scope</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<PenaltyDto, object>(x => x.Submitted)">Submitted</MudTableSortLabel>
                        </MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Admin">@context.Admin.Alias.UserName</MudTd>
                        <MudTd DataLabel="Reason">@context.Reason</MudTd>
                        <MudTd DataLabel="Type">@context.PenaltyType.ToString()</MudTd>
                        <MudTd DataLabel="Scope">@context.PenaltyScope.ToString()</MudTd>
                        <MudTd DataLabel="Submitted">@context.Submitted.Humanize()</MudTd>
                        <MudTd DataLabel="View">
                            <MudChip Size="Size.Medium" Variant="Variant.Text" Color="Color.Info">Click to View</MudChip>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">

                    <MudList Dense="true">
                        <MudListItem IconColor="Color.Info" Icon="@Icons.Material.Filled.Person">
                            <b>Profile Name: </b> @_entity.Alias.UserName (@_entity.Identity)
                            @if (_entity.HeartBeat + TimeSpan.FromMinutes(5) > DateTimeOffset.UtcNow)
                            {
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Online</MudChip>
                            }
                            else
                            {
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning">Offline</MudChip>
                            }
                            @if (_isGlobalBanned)
                            {
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Globally Banned</MudChip>
                            }
                            else
                            {
                                <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Not Globally Banned</MudChip>
                            }
                            <AuthorizeView Roles="Moderator">
                                <NotAuthorized>
                                    @if (_hasNotes)
                                    {
                                        <MudElement>
                                            <MudButton StartIcon="@Icons.Material.Filled.Bookmark" Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="ToggleOpen">@(_isOpen ? "Close Notes" : $"Notes ({_entity.Notes.Count})")</MudButton>
                                            <MudPopover Class="mt-2" Open="_isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" Elevation="6" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-4" style="width: 100%">
                                                    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;">
                                                        <thead>
                                                        <tr>
                                                            <th>Admin</th>
                                                            <th>Note</th>
                                                            <th>Created</th>
                                                        </tr>
                                                        </thead>
                                                        <tbody>
                                                        @foreach (var note in _entity.Notes.OrderByDescending(x => x.Created))
                                                        {
                                                            <tr>
                                                                <td>@note.Admin.Alias.UserName</td>
                                                                <td>@note.Message</td>
                                                                <td>@note.Created.Humanize()</td>

                                                            </tr>
                                                        }
                                                        </tbody>
                                                    </MudSimpleTable>
                                                </div>
                                            </MudPopover>
                                        </MudElement>
                                    }
                                </NotAuthorized>
                            </AuthorizeView>
                        </MudListItem>
                        <MudDivider DividerType="DividerType.Inset"/>
                        <MudListItem Icon="@Icons.Material.Filled.Report">
                            <b>Penalty Count: </b> @_entity.Penalties.Count
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.List">
                            <b>Last Connected Server: </b> @_lastConnectedServer
                        </MudListItem>
                    </MudList>

                </MudPaper>
            </MudItem>
            @if (_selectedPenalty is not null)
            {
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">

                        <MudList Dense="true">
                            <MudListItem IconColor="Color.Warning" Icon="@Icons.Material.Filled.Report">
                                <b>Penalty: </b> @_selectedPenalty.PenaltyGuid
                                @switch (_selectedPenalty.PenaltyScope)
                                {
                                    case PenaltyScope.Local:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Local</MudChip>
                                        break;
                                    case PenaltyScope.Global:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Global</MudChip>
                                        break;
                                }
                                @switch (_selectedPenalty.PenaltyType)
                                {
                                    case PenaltyType.Warn:
                                        <MudChip Variant="Variant.Text" Size="Size.Small">Warn</MudChip>
                                        break;
                                    case PenaltyType.Mute:
                                        <MudChip Variant="Variant.Text" Size="Size.Small">Mute</MudChip>
                                        break;
                                    case PenaltyType.Kick:
                                        <MudChip Variant="Variant.Text" Size="Size.Small">Kick</MudChip>
                                        break;
                                    case PenaltyType.Unban:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Unban</MudChip>
                                        break;
                                    case PenaltyType.TempBan:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning">Tempban</MudChip>
                                        break;
                                    case PenaltyType.Ban:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Ban</MudChip>
                                        break;
                                }
                                @switch (_selectedPenalty.PenaltyStatus)
                                {
                                    case PenaltyStatus.Informational:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Informational</MudChip>
                                        break;
                                    case PenaltyStatus.Active:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Success">Active</MudChip>
                                        break;
                                    case PenaltyStatus.Revoked:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Revoked</MudChip>
                                        break;
                                    case PenaltyStatus.Expired:
                                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Expired</MudChip>
                                        break;
                                }
                            </MudListItem>
                            <MudDivider DividerType="DividerType.Inset"/>
                            <MudListItem Icon="@Icons.Filled.AdminPanelSettings">
                                <b>Accusing Admin: </b> @_selectedPenalty.Admin.Alias.UserName
                            </MudListItem>
                            <MudListItem Icon="@Icons.Filled.Message">
                                <b>Provided Reason: </b> @_selectedPenalty.Reason
                            </MudListItem>
                            @if (_selectedPenalty.Evidence is not null)
                            {
                                <MudListItem Icon="@Icons.Filled.VideoLabel">
                                    <b>Supporting Evidence: </b> <MudLink Typo="Typo.body2" Href="@_selectedPenalty.Evidence">Link to evidence</MudLink>
                                </MudListItem>
                            }
                            @if (_selectedPenalty.Duration.HasValue)
                            {
                                <MudListItem Icon="@Icons.Filled.Timelapse">
                                    <b>Penalty Duration: </b> @_selectedPenalty.Duration.Value.Humanize()
                                </MudListItem>
                            }
                            <MudListItem Icon="@Icons.Material.Filled.Storage">
                                <b>Sending Server: </b> @(_selectedPenalty.Instance.InstanceName ?? _selectedPenalty.Instance.InstanceGuid.ToString())
                            </MudListItem>
                            <MudListItem Icon="@Icons.Filled.MoreTime">
                                <b>Time Submitted: </b>
                                <MudTooltip Arrow="true" Placement="Placement.Top" Text="@_selectedPenalty.Submitted.Value.ToString("yyyy-MM-dd HH:mm:ss")">
                                    @(_selectedPenalty.Submitted.Value.Humanize())
                                </MudTooltip>
                            </MudListItem>
                        </MudList>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
    </MudGrid>
    </MudContainer>
}

@code
{
    [Parameter]
    public string Identity { get; set; } = null!;

    private EntityDto? _entity;
    private bool _isGlobalBanned;
    private bool _hasNotes;
    private string _lastConnectedServer;
    private int selectedRowNumber = -1;
    private PenaltyDto? _selectedPenalty;
    private MudTable<PenaltyDto> mudTable;

    private bool _isOpen = false;
    public void ToggleOpen() => _isOpen = !_isOpen;

    protected override async Task OnInitializedAsync()
    {
        _entity = await Http.GetFromJsonAsync<EntityDto>($"api/v2/Entity?identity={Identity}");
        if (_entity is not null)
        {
            _isGlobalBanned = _entity.Penalties?.Any(x => x.PenaltyStatus is PenaltyStatus.Active && x.PenaltyScope is PenaltyScope.Global) ?? false;
    // API returns this data. Need to protect the note endpoint TODO
            _hasNotes = _entity.Notes is not null && _entity.Notes.Count is not 0;
        }

        if (_entity!.Servers is not null && _entity.Servers.Count is not 0)
        {
            _lastConnectedServer = _entity.Servers.MaxBy(x => x.Connected)?.ServerName ?? "Error";
        }
        else
        {
            _lastConnectedServer = "None";
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<PenaltyDto> tableRowClickEventArgs)
    {
        _selectedPenalty = tableRowClickEventArgs.Item;
    }

}
