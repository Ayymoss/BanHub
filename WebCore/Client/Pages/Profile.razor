@page "/Profile/{Identity}"
@inject HttpClient Http
@inject IDialogService DialogService

<PageTitle>@_title | Profile | Ban Hub</PageTitle>

@if (_entity is null)
{
    <MudText Typo="Typo.h4" GutterBottom="true">Profile not found!</MudText>
    <MudText Typo="Typo.body1" GutterBottom="true" Color="Color.Info">Provided identity doesn't exist.</MudText>
}
else
{
    <MudText Typo="Typo.h4" GutterBottom="true">
        Profile - @_entity.Alias.UserName (@_entity.Identity)
        @if (_entity.HeartBeat + TimeSpan.FromMinutes(5) > DateTimeOffset.UtcNow)
        {
            <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Info">Online</MudChip>
        }
        else
        {
            <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Warning">Offline</MudChip>
        }
        @if (_isGlobalBanned)
        {
            <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Error">Globally Banned</MudChip>
        }
        else
        {
            <MudChip Variant="Variant.Text" Size="Size.Large" Color="Color.Info">Not Globally Banned</MudChip>
        }
    </MudText>
    <MudContainer Style="height: 600px" Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                    @if (!_entity.Penalties.Any())
                    {
                        <MudText Align="Align.Center" Typo="Typo.h5">The user has no penalties.</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Align="Align.Center">Click an penalty for info</MudText>
                        <br/>
                        <MudTable Items="@_entity.Penalties" Hover="true" FixedHeader="true" Height="100%" @ref="_mudTable" OnRowClick="RowClickEvent" T="PenaltyDto">
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.Admin.Alias.UserName)">Admin</MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.Reason)">Reason</MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.PenaltyType)">Type</MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<PenaltyDto, object>(x => x.PenaltyScope)">Scope</MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<PenaltyDto, object>(x => x.Submitted)">Submitted</MudTableSortLabel>
                                </MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Admin">@context.Admin.Alias.UserName</MudTd>
                                <MudTd DataLabel="Reason">@context.Reason</MudTd>
                                <MudTd DataLabel="Type">@context.PenaltyType.ToString()</MudTd>
                                <MudTd DataLabel="Scope">@context.PenaltyScope.ToString()</MudTd>
                                <MudTd DataLabel="Submitted">@context.Submitted.Humanize()</MudTd>
                                <MudTd DataLabel="View">
                                    <MudChip Size="Size.Medium" Color="Color.Info">Click to View</MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudGrid>
                    <MudItem xs="12">

                        <MudGrid Spacing="2" Justify="Justify.Center">
                            <MudItem Class="flex-1">
                                <MudPaper Class="d-flex justify-center flex-column align-self-center pa-6" Elevation="2">
                                    <MudText Typo="Typo.subtitle1" Color="Color.Info">@_entity.Penalties.Count</MudText>
                                    <MudText Class="mud-text-secondary">Penalty Count</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem Class="flex-1">
                                <MudPaper Class="d-flex justify-center flex-column align-self-center pa-6" Elevation="2">
                                    <MudText Typo="Typo.subtitle1" Color="Color.Info">@_lastConnectedServer</MudText>
                                    <MudText Class="mud-text-secondary">Last Connected Server</MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    @if (_hasNotes)
                    {
                        <MudItem xs="12">
                            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">

                                <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;">
                                    <thead>
                                    <tr>
                                        <th>Admin</th>
                                        <th>Note</th>
                                        <th>Created</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var note in _entity.Notes.OrderByDescending(x => x.Created))
                                    {
                                        <tr>
                                            <td>@note.Admin.Alias.UserName</td>
                                            <td>@note.Message</td>
                                            <td>@note.Created.Humanize()</td>
                                        </tr>
                                    }
                                    </tbody>
                                </MudSimpleTable>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code
{
    [Parameter]
    public string Identity { get; set; } = null!;

    private EntityDto? _entity;
    private bool _isGlobalBanned;
    private bool _hasNotes;
    private string? _lastConnectedServer;
    private string _title = "Not Found";
    private MudTable<PenaltyDto>? _mudTable;

    protected override async Task OnInitializedAsync()
    {
        var request = await Http.GetAsync($"api/v2/Entity?identity={Identity}");
        if (!request.IsSuccessStatusCode) return;

        _entity = await request.Content.ReadFromJsonAsync<EntityDto>();
        if (_entity is not null)
        {
            _isGlobalBanned = _entity.Penalties?.Any(x => x is {PenaltyStatus: PenaltyStatus.Active, PenaltyScope: PenaltyScope.Global}) ?? false;
            _hasNotes = _entity.Notes is not null && _entity.Notes.Count is not 0;
            _title = _entity.Alias.UserName;
        }

        if (_entity!.Servers is not null && _entity.Servers.Count is not 0)
        {
            _lastConnectedServer = _entity.Servers.MaxBy(x => x.Connected)?.ServerName ?? "Error";
        }
        else
        {
            _lastConnectedServer = "None";
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<PenaltyDto> tableRowClickEventArgs)
    {
        var parameters = new DialogParameters
        {
            {"Penalty", tableRowClickEventArgs.Item}
        };

        var options = new DialogOptions {CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true};
        var title = $"{tableRowClickEventArgs.Item.PenaltyType} - {_entity!.Alias!.UserName} - {tableRowClickEventArgs.Item.Submitted.Humanize().Titleize()}";

        DialogService.Show<ProfilePenaltyDialog>(title, parameters, options);
    }

}
