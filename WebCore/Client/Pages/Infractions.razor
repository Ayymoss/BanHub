@page "/Infractions"
@using GlobalInfraction.WebCore.Shared.Models
@using GlobalInfraction.WebCore.Shared.Enums
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Infractions</MudText>


@if (_infractions is null)
{
    <p>
        @if (Empty)
        {
            <MudText Class="mb-8" Color="Color.Warning">No infraction(s) found.</MudText>
        }
        else
        {
            <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Indeterminate="true"/>
        }
    </p>
}
else
{
    <MudTable Items="_infractions" Dense="true" Hover="true" SortLabel="Sort By" Elevation="2" RowsPerPage="20" Filter="new Func<InfractionDto, bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">All infractions</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.InfractionGuid)">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.Target.Alias.UserName)">Target Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.Admin.Alias.UserName)">Admin Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.Reason)">Reason</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.InfractionType)">Type</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.InfractionStatus)">State</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.InfractionScope)">Scope</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<InfractionDto, object>(x => x.Instance.InstanceGuid)">Instance</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<InfractionDto, object>(x => x.Submitted)">Submitted</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.InfractionGuid</MudTd>
            <MudTd DataLabel="Target Name">
                <a href="/Profile/@context.Target!.Identity">
                    <MudText Typo="Typo.body2" Color="Color.Warning">
                        @context.Target!.Alias!.UserName
                    </MudText>
                </a>
            </MudTd>
            <MudTd DataLabel="Admin Name">
                <a href="/Profile/@context.Admin!.Identity">
                    <MudText Typo="Typo.body2" Color="Color.Info">
                        @context.Admin!.Alias!.UserName
                    </MudText>
                </a>
            </MudTd>
            <MudTd DataLabel="Reason">@context.Reason</MudTd>
            <MudTd DataLabel="Type">
                @switch (context.InfractionType)
                {
                    case InfractionType.Warn:
                        <MudChip Variant="Variant.Text" Size="Size.Small">Warn</MudChip>
                        break;
                    case InfractionType.Mute:
                        <MudChip Variant="Variant.Text" Size="Size.Small">Mute</MudChip>
                        break;
                    case InfractionType.Kick:
                        <MudChip Variant="Variant.Text" Size="Size.Small">Kick</MudChip>
                        break;
                    case InfractionType.Unban:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Unban</MudChip>
                        break;
                    case InfractionType.TempBan:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Warning">Tempban</MudChip>
                        break;
                    case InfractionType.Ban:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Ban</MudChip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="Status">
                @switch (context.InfractionStatus)
                {
                    case InfractionStatus.Informational:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Informational</MudChip>
                        break;
                    case InfractionStatus.Active:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Success">Active</MudChip>
                        break;
                    case InfractionStatus.Revoked:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Revoked</MudChip>
                        break;
                    case InfractionStatus.Expired:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Expired</MudChip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="Scope">
                @switch (context.InfractionScope)
                {
                    case InfractionScope.Local:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Info">Local</MudChip>
                        break;
                    case InfractionScope.Global:
                        <MudChip Variant="Variant.Text" Size="Size.Small" Color="Color.Error">Global</MudChip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="Instance Name">@(context.Instance!.InstanceName ?? context.Instance.InstanceGuid.ToString())</MudTd>
            <MudTd DataLabel="Submitted">@context.Submitted!.Value.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {50, 100}"/>
        </PagerContent>
    </MudTable>
}

@code {

    [Parameter, SupplyParameterFromQuery(Name = "search")]
    public string? SearchString { get; set; }

    private bool Empty { get; set; }
    private List<InfractionDto>? _infractions;

    private string _search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _infractions = await Http.GetFromJsonAsync<List<InfractionDto>>("/api/Infraction/All");
        if (_infractions is null || !_infractions.Any()) Empty = true;
        if (SearchString is not null) _search = SearchString;
    }

    private bool FilterFunc1(InfractionDto element) => FilterFunc(element, _search);

    private bool FilterFunc(InfractionDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.InfractionGuid.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Admin!.Alias!.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Target!.Alias!.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Target.Identity.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Admin.Identity.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Reason!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.InfractionStatus.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.InfractionScope.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.InfractionType.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Instance!.InstanceGuid.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}
