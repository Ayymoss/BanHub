@page "/Communities/{Identity}"
@using Server = BanHub.WebCore.Shared.Models.CommunityProfileView.Server
@using BanHub.WebCore.Shared.Models.CommunityProfileView
@using Penalty = BanHub.WebCore.Shared.Models.CommunityProfileView.Penalty
@inject CommunityService CommunityService
@inject ISnackbar SnackbarService
@inject PenaltyService PenaltyService
@inject IDialogService DialogService

<PageTitle>@_title | Community | Ban Hub</PageTitle>

@if (_error)
{
    <MudText>Unknown instance.</MudText>
}
else
{
    @if (_loading)
    {
        <MudText Typo="Typo.h4">Loading...</MudText>
        <MudProgressLinear Color="Color.Info" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    }
    else
    {
        @if (_community is null)
        {
            <MudText Typo="Typo.h4">Community not found!</MudText>
            <MudText Typo="Typo.body1" Color="Color.Info">Provided community GUID doesn't exist.</MudText>
        }
        else
        {
            <MudElement Class="d-flex align-center">
                <MudElement Class="d-flex align-center">
                    <MudLink Href="@($"https://{_community.CommunityWebsite}/")" Typo="Typo.h4" Class="mud-text-secondary">@_community.CommunityName</MudLink>
                </MudElement>
                <MudSpacer/>
                <MudElement>
                    <MudChip Variant="Variant.Text" Size="Size.Large"
                             Color="@(_community.Connected ? Color.Info : Color.Warning)">
                        @(_community.Connected ? "Connected" : "Disconnected")
                    </MudChip>
                    <MudChip Variant="Variant.Text" Size="Size.Large"
                             Color="@(_community.Active ? Color.Info : Color.Error)">
                        @(_community.Active ? "Activated" : "Not Activated")
                    </MudChip>
                    <AuthorizeView Roles="@HelperMethods.GetRolesAsString(new[] {WebRole.SuperAdmin})">
                        <Authorized>
                            <MudIconButton Icon="@(_community.Active ? Icons.Material.Filled.RemoveModerator : Icons.Material.Filled.AddModerator)"
                                           Title="@(_community.Active ? "Deauthorise" : "Authorise")"
                                           Color="@(_community.Active ? Color.Warning : Color.Default)"
                                           OnClick="AuthoriseCommunityAsync" Size="Size.Large" ButtonType="ButtonType.Button"
                                           Class="ml-1" Variant="Variant.Filled"/>
                        </Authorized>
                    </AuthorizeView>
                </MudElement>
            </MudElement>
            <MudElement Class="mt-4 d-flex flex-column">
                <MudStack Row="true" Spacing="3">
                    <MudPaper Class="pa-4 d-flex flex-grow-1 flex-column">
                        <MudText Typo="Typo.h6" Class="mb-4">About</MudText>
                        <MudText>@_community.About</MudText>
                    </MudPaper>
                    @if (_community.Socials is not null and not {Count: 0})
                    {
                        <MudPaper MaxWidth="20%" MinWidth="20%" Class="pa-4 d-flex flex-grow-1 flex-column">
                            <MudText Typo="Typo.h6" Class="mb-4">Socials</MudText>
                            @foreach (var social in _community.Socials)
                            {
                                <MudLink Color="Color.Info" Href="@(social.Value)">@social.Key</MudLink>
                            }
                        </MudPaper>
                    }
                </MudStack>
                <MudElement Class="mt-4">
                    <MudGrid Spacing="2" Justify="Justify.FlexStart">
                        <MudItem xs="12" sm="4" xl="3" xxl="2">
                            <MudPaper Class="d-flex flex-column pa-4" Elevation="2">
                                <MudText Typo="Typo.subtitle1" Color="Color.Info">@_community.ServerCount</MudText>
                                <MudText Class="mud-text-secondary">Servers</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="4" xl="3" xxl="2">
                            <MudPaper Class="d-flex flex-column pa-4" Elevation="2">
                                <MudText Typo="Typo.subtitle1" Color="Color.Info">@_community.Created.Humanize()</MudText>
                                <MudText Class="mud-text-secondary">Created</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="4" xl="3" xxl="2">
                            <MudPaper Class="d-flex flex-column pa-4" Elevation="2">
                                <MudText Typo="Typo.subtitle1" Color="Color.Info">@_community.PenaltiesCount (@_community.AutomatedPenaltiesCount)</MudText>
                                <MudText Class="mud-text-secondary">Penalties (Automated)</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudElement>

                <MudElement Class="mt-4">
                    <MudTabs Position="Position.Left" Elevation="2" Rounded="true" PanelClass="d-flex flex-column ml-4" SliderColor="Color.Info">
                        <MudTabPanel Text="Servers">
                            <MudElement Class="flex-grow-1 d-flex flex-column">
                                @if (_community.ServerCount is 0)
                                {
                                    <MudPaper Class="pa-4 flex-1 d-flex align-center justify-center">
                                        <MudText Align="Align.Center" Class="mud-text-secondary" Typo="Typo.h6">The community has no servers.</MudText>
                                    </MudPaper>
                                }
                                else
                                {
                                    <MudTable Striped="true" HeaderClass="mud-theme-info-darken" Outlined="false" Bordered="false"
                                              Items="@_communityServers" Dense="true" @ref="_serverTable" T="Server" RowsPerPage="10">
                                        <HeaderContent>
                                            <MudTh Class="rounded-tl py-2">
                                                <MudTableSortLabel SortBy="new Func<Server, object>(x => x.ServerName)">Name</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Server, object>(x => x.ServerId)">IP</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Server, object>(x => x.ServerGame)">Game</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh Class="rounded-tr">
                                                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Server, object>(x => x.Updated)">Updated</MudTableSortLabel>
                                            </MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Name">@context.ServerName</MudTd>
                                            <MudTd DataLabel="IP">
                                                <MudText Typo="Typo.body2">@context.ServerIp:@context.ServerPort</MudText>
                                            </MudTd>
                                            <MudTd DataLabel="Game">@(context.ServerGame.GetGameName())</MudTd>
                                            <MudTd DataLabel="Updated">@context.Updated.Humanize()</MudTd>
                                        </RowTemplate>
                                        <PagerContent>
                                            <MudTablePager/>
                                        </PagerContent>
                                    </MudTable>
                                }
                            </MudElement>
                        </MudTabPanel>
                        <MudTabPanel Text="Penalties">
                            <MudElement Class="flex-grow-1 d-flex flex-column">
                                @if (!_penalties.Any())
                                {
                                    <MudPaper Class="pa-4 flex-1 d-flex align-center justify-center">
                                        <MudText Align="Align.Center" Class="mud-text-secondary" Typo="Typo.h6">The user has no penalties.</MudText>
                                    </MudPaper>
                                }
                                else
                                {
                                    <MudTable Striped="true" HeaderClass="mud-theme-info-darken" Outlined="false" Bordered="false"
                                              Items="@_penalties" Dense="true" @ref="_penaltyTable" OnRowClick="PenaltyRowClickEvent"
                                              T="Penalty" RowsPerPage="10">
                                        <HeaderContent>
                                            <MudTh Class="rounded-tl py-2">
                                                <MudTableSortLabel SortBy="new Func<Penalty, object>(x => x.TargetUserName)">Offender</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Penalty, object>(x => x.AdminUserName)">Issuer</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Penalty, object>(x => x.Reason)">Reason</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Penalty, object>(x => x.PenaltyType)">Type</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Penalty, object>(x => x.PenaltyScope)">Scope</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel SortBy="new Func<Penalty, object>(x => x.PenaltyStatus)">Status</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh>
                                                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Penalty, object>(x => x.Submitted)">Submitted</MudTableSortLabel>
                                            </MudTh>
                                            <MudTh Class="rounded-tr" Style="width: 100px;"/>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Target">
                                                <MudLink Href="@($"/Players/{context.TargetIdentity}")" Typo="Typo.body2" Color="Color.Info">@context.TargetUserName</MudLink>
                                            </MudTd>
                                            <MudTd DataLabel="Admin">
                                                <MudLink Href="@($"/Players/{context.AdminIdentity}")" Typo="Typo.body2" Color="Color.Info">@context.AdminUserName</MudLink>
                                            </MudTd>
                                            <MudTd DataLabel="Reason">@context.Reason</MudTd>
                                            <MudTd DataLabel="Type">@context.PenaltyType.ToString()</MudTd>
                                            <MudTd DataLabel="Scope">@context.PenaltyScope.ToString()</MudTd>
                                            <MudTd DataLabel="Status">@context.PenaltyStatus.ToString()</MudTd>
                                            <MudTd DataLabel="Submitted">@context.Submitted.Humanize()</MudTd>
                                            <MudTd DataLabel="View">
                                                <MudChip Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info">
                                                    <MudIcon Icon="@Icons.Material.Filled.LocalSee"/>
                                                </MudChip>
                                            </MudTd>
                                        </RowTemplate>
                                        <PagerContent>
                                            <MudTablePager/>
                                        </PagerContent>
                                    </MudTable>
                                }
                            </MudElement>
                        </MudTabPanel>
                    </MudTabs>
                </MudElement>
            </MudElement>
        }
    }
}

@code
{
    [Parameter]
    public string? Identity { get; set; }

    private Community? _community;
    private IEnumerable<Server>? _communityServers;
    private string _title = "Not Found";
    private bool _loading = true;
    private bool _error;
    private MudTable<Server>? _serverTable;
    private List<Penalty>? _penalties;
    private MudTable<Penalty>? _penaltyTable;

    protected override async Task OnInitializedAsync()
    {
        await LoadCommunityAsync();
    }

    private async Task LoadCommunityAsync()
    {
        if (string.IsNullOrEmpty(Identity))
        {
            _title = "Unknown Community";
            _loading = false;
            _error = true;
            return;
        }

        _penalties = (await PenaltyService.GetCommunityPenaltiesAsync(Identity!)).ToList();
        _community = await CommunityService.GetCommunityAsync(Identity);
        _communityServers = await CommunityService.GetCommunityProfileServersAsync(Identity);
        _title = _community.CommunityName;
        _loading = false;
        StateHasChanged();
    }

    private async Task AuthoriseCommunityAsync()
    {
        if (_community is null || string.IsNullOrEmpty(Identity)) return;

        var state = _community.Active ? "deactivate" : "activate";
        var result = await CommunityService.ToggleCommunityActivationAsync(Identity);
        if (!result)
        {
            SnackbarService.Add($"Failed to {state} community!", Severity.Error);
            return;
        }

        await LoadCommunityAsync();
        SnackbarService.Add($"Success! Community has been {state}d!", Severity.Success);
    }

    private async Task PenaltyRowClickEvent(TableRowClickEventArgs<Penalty> clickArg)
    {
        if (_community is null) return;
        var convertedPenalty = new BanHub.WebCore.Shared.Models.PlayerProfileView.Penalty
        {
            PenaltyGuid = clickArg.Item.PenaltyGuid,
            AdminUserName = clickArg.Item.AdminUserName,
            Reason = clickArg.Item.Reason,
            Evidence = clickArg.Item.Evidence,
            CommunityName = _community.CommunityName,
            CommunityGuid = _community.CommunityGuid,
            Expiration = clickArg.Item.Expiration,
            PenaltyType = clickArg.Item.PenaltyType,
            PenaltyScope = clickArg.Item.PenaltyScope,
            PenaltyStatus = clickArg.Item.PenaltyStatus,
            Submitted = clickArg.Item.Submitted
        };

        var parameters = new DialogParameters
        {
            {"Penalty", convertedPenalty}
        };

        var options = new DialogOptions {CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true};
        var title = $"{clickArg.Item.PenaltyType} - {clickArg.Item.TargetUserName} - {clickArg.Item.Submitted.Humanize().Titleize()}";

        var dialog = await DialogService.ShowAsync<ProfilePenaltyDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (result?.Data is BanHub.WebCore.Shared.Models.PlayerProfileView.Penalty)
        {
            _penalties?.Remove(clickArg.Item);
            StateHasChanged();
        }
    }
}
